// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> FirstMap;
//SamplerState _LinearClamp;
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    /*float3 resolution = float3(1024, 1024, 1024);  //cubemap resolution
    float3 pixel = float3(id.x, 1.0 - id.y, id.z);  //pixel coordinates
    float3 uv = pixel / resolution;  //normalized uv coordinates
    float4 result = Result.SampleLevel(_LinearClamp, uv, 0);*/
    Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0);
    
}
/*
#pragma kernel CSMain

TextureCube<float4> cubemap;
SamplerState _LinearClamp;

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float3 resolution = float3(1024, 1024, 1024);  //cubemap resolution
    float3 pixel = float3(id.x, id.y, id.z);  //pixel coordinates
    float3 uv = pixel / resolution;  //normalized uv coordinates
    float4 result = cubemap.SampleLevel(_LinearClamp, uv, 0);
}
*/